// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CustomerEmailStatus {
  VERIFIED
  UNVERIFIED
}

model Customer {
  id              Int                 @id @default(autoincrement()) @map("id")
  email           String              @unique @map("email")
  password        String              @map("password")
  customerRoles   CustomerRoles[]
  customerSession CustomerSession?
  emailStatus     CustomerEmailStatus @default(UNVERIFIED) @map("email_status")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt() @map("updated_at")

  @@map("customers")
}

model Employee {
  id            Int              @id @default(autoincrement()) @map("id")
  email         String           @unique @map("email")
  password      String           @map("password")
  employeeRoles EmployeeRoles[]
  session       EmployeeSession?
  updatedAt     DateTime         @updatedAt() @map("updated_at")
  createdAt     DateTime         @default(now()) @map("created_at")

  @@map("employees")
}

model Role {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  description String?  @map("description")
  updatedAt   DateTime @updatedAt() @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  employeeRoles EmployeeRoles[]
  customerRoles CustomerRoles[]

  @@map("roles")
}

model EmployeeRoles {
  employeeId Int      @map("employee_id")
  roleId     Int      @map("role_id")
  updatedAt  DateTime @updatedAt() @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")

  employee Employee @relation(fields: [employeeId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])

  @@id([employeeId, roleId]) // Composite primary key
  @@map("employee_roles")
}

model CustomerRoles {
  customerId Int      @map("customer_id")
  roleId     Int      @map("role_id")
  updatedAt  DateTime @updatedAt() @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")
  customer   Customer @relation(fields: [customerId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])

  @@id([customerId, roleId]) // Composite primary key
  @@map("customer_roles")
}

model EmployeeSession {
  id           Int       @id @default(autoincrement())
  employeeId   Int       @unique @map("employee_id")
  userAgentId  Int       @map("user_agent_id")
  accessToken  String    @map("access_token")
  refreshToken String    @map("refresh_token")
  lastLogin    DateTime  @default(now()) @map("last_login")
  updatedAt    DateTime  @updatedAt() @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  userAgent    UserAgent @relation(fields: [userAgentId], references: [id])
  employee     Employee? @relation(fields: [employeeId], references: [id])

  @@map("employee_sessions")
}

model CustomerSession {
  id           Int       @id @default(autoincrement())
  customerId   Int       @unique @map("customer_id")
  userAgentId  Int       @map("user_agent_id")
  accessToken  String    @map("access_token")
  refreshToken String    @map("refresh_token")
  lastLogin    DateTime  @default(now()) @map("last_login")
  updatedAt    DateTime  @updatedAt() @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  userAgent    UserAgent @relation(fields: [userAgentId], references: [id])
  customer     Customer? @relation(fields: [customerId], references: [id])

  @@map("customer_sessions")
}

model UserAgent {
  id              Int               @id @default(autoincrement())
  ua              String            @unique
  employeeSession EmployeeSession[]
  customerSession CustomerSession[]
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  createdAt       DateTime          @default(now()) @map("created_at")

  @@map("user_agents")
}
