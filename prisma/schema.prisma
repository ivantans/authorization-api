// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            Int             @id @map("id")
  email         String          @unique @map("email")
  password      String          @map("password")
  CustomerRoles CustomerRoles[]

  @@map("customers")
}

model Employee {
  id            Int             @id @map("id")
  email         String          @unique @map("email")
  password      String          @map("password")
  EmployeeRoles EmployeeRoles[]

  @@map("employees")
}

model Role {
  id          Int     @id @map("id")
  name        String  @unique @map("name")
  description String? @map("description")

  EmployeeRoles EmployeeRoles[]
  CustomerRoles CustomerRoles[]

  @@map("roles")
}

// Model untuk pivot EmployeeRoles (automatically handled by Prisma for many-to-many)
model EmployeeRoles {
  employeeId Int @map("employee_id")
  roleId     Int @map("role_id")

  employee Employee @relation(fields: [employeeId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])

  @@id([employeeId, roleId]) // Composite primary key
  @@map("employee_roles")
}

// Model untuk pivot CustomerRoles (automatically handled by Prisma for many-to-many)
model CustomerRoles {
  customerId Int @map("customer_id")
  roleId     Int @map("role_id")

  customer Customer @relation(fields: [customerId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])

  @@id([customerId, roleId]) // Composite primary key
  @@map("customer_roles")
}
